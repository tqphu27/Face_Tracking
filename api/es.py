from elasticsearch import Elasticsearch, helpers
from datetime import datetime
import base64
from numpy.linalg import norm
import numpy as np


dfloat32 = np.dtype('>f4')

def decode_float_list(base64_string):
    bytes = base64.b64decode(base64_string)
    return np.frombuffer(bytes, dtype=dfloat32).tolist()

def encode_array(arr):
    base64_str = base64.b64encode(np.array(arr).astype(dfloat32)).decode("utf-8")
    return base64_str

face_emb = [0.16696437, -0.0348432, -0.02705508, -0.03685596, 0.11478754, 0.11179885, -0.01515984, 0.21286219, 0.08517206, -0.00756939, 0.01099467, 0.08999611, -0.09572721, 0.21603145, -0.09431924, 0.07426175, 0.00628396, 0.00057743, -0.00580535, 0.00360375, -0.04596921, 0.19922665, -0.02344929, -0.01065982, -0.09513939, -0.06565833, -0.00360775, -0.03637649, 0.05285419, -0.05860331, 0.05133638, -0.03444215, 0.07740695, -0.18261211, 0.10754068, 0.14081399, 0.03635654, -0.01585467, -0.00571539, -0.1055627, -0.04682457, -0.01807757, -0.04407675, 0.0473281, -0.0037903, 0.01643581, -0.04705026, -0.0838929, -0.05454464, -0.00417834, -0.0347574, -0.07266592, 0.18580073, -0.05455497, -0.04460238, -0.03814093, -0.08577031, -0.06654985, -0.01405899, -0.02890557, 0.13796613, -0.07462438, 0.04181166, -0.04148838, 0.0002093, -0.0300012, 0.01974243, -0.0525928, -0.03298814, 0.06140598, 0.03573455, -0.09257028, -0.1074699, 0.18567354, 0.06661209, 0.00684305, 0.07626124, -0.03757151, 0.04686036, -0.09633026, 0.16396524, -0.02336516, -0.03358216, 0.19052623, 0.15169644, 0.10679497, -0.05021421, 0.06713047, -0.03074783, -0.0733742, 0.13857245, 0.00817112, 0.10231867, 0.03217256, 0.07820515, -0.27567747, -0.02802901, -0.08846641, -0.0896991, -0.13046004, -0.10510154, 0.13258357, 0.00136191, 0.18995191, 0.15843375, 0.13445231, 0.00826475, -0.13225231, -0.01071903, -0.15168515, -0.09905915, -0.05284977, 0.00778336, 0.06331191, 0.09589071, -0.04768074, -0.0350557, -0.09074859, 0.03432115, -0.03209957, -0.04354042, -0.06681594, -0.0307419, -0.05569945, -0.0172519, -0.01287456, -0.07937667, -0.02761515]

face_mask_emb = [0.04714606, -0.01924806, 0.06350508, 0.02833994, 0.03603479, 0.27325624, -0.04774015, 0.00044873, -0.01905514, -0.06644695, -0.01714354, -0.0133114, -0.100448, 0.1656481, -0.10649555, 0.10851497, -0.09106875, -0.0344629, -0.07035076, 0.16242659, -0.02713754, 0.04683729, -0.17004694, -0.08832169, -0.09248722, 0.00889777, -0.0830253, 0.18348444, -0.02991862, -0.05434863, 0.05509118, -0.04411525, 0.06175384, -0.04102843, 0.08761751, 0.20492192, 0.10187722, 0.03862741, -0.01496151, -0.098047, -0.03928855, -0.05318549, -0.09046774, 0.11699041, -0.07235092, -0.06553391, -0.07345242, -0.06197285, -0.05394983, -0.06258591, 0.09608728, -0.0284545, 0.08622862, -0.07927841, 0.0832109, 0.04523423, -0.03314763, -0.0959678, 0.09901355, -0.0140054, 0.03926419, 0.02567963, -0.05226382, 0.07935098, -0.04850163, -0.07245183, 0.02716455, -0.08326199, 0.07137446, -0.02983516, 0.2269699, -0.09154947, 0.01240211, 0.11643336, 0.06631457, 0.01799333, 0.08996826, -0.03991697, -0.07083923, -0.10398442, 0.08079749, -0.04987243, -0.01527888, 0.09756114, 0.1040632, 0.05528722, 0.08714499, 0.09869543, -0.04928561, -0.01802506, -0.00967909, 0.00889648, 0.10719877, 0.0512646, -0.01193979, -0.22036645, 0.19436486, -0.03881253, -0.08608762, -0.01479561, -0.05751136, 0.07538151, 0.14045739, 0.03916686, 0.09934926, 0.22480763, 0.12450151, -0.11930228, -0.0481304, -0.13212848, -0.08598106, 0.04070517, 0.08146492, 0.07201555, 0.01136838, -0.06276106, -0.00641087, -0.06715265, 0.14461267, 0.09478723, -0.07405664, -0.04556948, -0.07215188, 0.03720247, 0.04724029, 0.0147485, -0.08055407, -0.08100139]

es = Elasticsearch("http://0.0.0.0:9200/")

mapping_json = {
    "mappings": {
        "properties": {
            "name": {
                "type": "text"
            },
            "phone": {
                "type": "text"
            },
            "create_on": {
                "type": "date",
                "format": "dd/MM/yyyy HH:mm:ss"
            },
            "face_mask_embedding": {
                "type": "binary",
                "doc_values": True
            },
             "face_embedding": {
                "type": "binary",
                "doc_values": True
            },
            "last_modified": {
                "type": "date",
                "format": "dd/MM/yyyy HH:mm:ss"
            },
        }
    }
}

# es.indices.create(index="id_face", body=mapping_json)

documents = [
    {
        'name': 'Jane',
        'phone': '123456789',
        'create_on': datetime.now().strftime('%d/%m/%Y %H:%M:%S'),
        'face_embedding': encode_array(face_emb),
        'face_mask_embedding': encode_array(face_mask_emb),
        'last_modified': datetime.now().strftime('%d/%m/%Y %H:%M:%S'),
    },
]

# es.index(index='id_face', body=documents)

# helpers.bulk(es, documents, index='id_face')

query = {
            "min_score": 0.85,
            "query": {
                "function_score": {
                    "boost_mode": "replace",
                    "script_score": {
                        "script": {
                            "source": "binary_vector_score",
                            "lang": "knn",
                            "params": {
                                "cosine": True,
                                "field": ["face_embedding", "face_mask_embedding"],
                                "vector": face_emb
                            }
                        }
                    }
                }
            },
            "_source": 'name'
        }

query = {
    "query": {
        "bool": {
            "must": {"match": { "name": "Alice" }},
            "must": { "match": { "phone": '123456789'}} 
            }
        }
    }

res = es.search(index='id_face', body=query)

if res['hits']['total']['value'] > 0:
    print(True)
#     print(res['hits']['hits'][0]['_source']['name'])
else: print(False)
    